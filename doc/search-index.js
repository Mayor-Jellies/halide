var searchIndex = JSON.parse('{\
"lib":{"doc":"Crate level docs This crate is an example of calling …","t":[0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,12,12,11,12,11,0,12,11,11,11,12,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,3,5,3,3,5,5,5,5,5,5,5,5,5,5,6,17,17,17,3,12,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12],"n":["build","runtime","GenBuilder","Generator","bind","borrow","borrow","borrow_mut","borrow_mut","compile","debug","from","from","into","into","make_runtime","make_runtime","new","new_gen","out_dir","push_gen","rename","run_gen","try_from","try_from","try_into","try_into","type_id","type_id","HalideBuffer","borrow","borrow_mut","channels","create_buffer","data","flags","from","height","into","runtime_bindings","t","try_from","try_into","type_id","width","HalideDeviceInterfaceImplT","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_copy","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","code","compute_capability","copy_to_device","copy_to_host","detach_native","device","device_and_host_free","device_and_host_malloc","device_crop","device_free","device_interface","device_malloc","device_release","device_release_crop","device_slice","device_sync","dim","dimensions","extent","flags","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","halide_buffer_t","halide_copy_to_host","halide_device_interface_t","halide_dimension_t","halide_free","halide_malloc","halide_memoization_cache_release","halide_memoization_cache_set_size","halide_profiler_report","halide_profiler_reset","halide_set_num_threads","halide_set_trace_file","halide_shutdown_thread_pool","halide_shutdown_trace","halide_type_code_t","halide_type_code_t_halide_type_float","halide_type_code_t_halide_type_int","halide_type_code_t_halide_type_uint","halide_type_t","host","impl_","into","into","into","into","into","lanes","min","padding","stride","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","wrap_native"],"q":["lib","","lib::build","","","","","","","","","","","","","","","","","","","","","","","","","","","lib::runtime","","","","","","","","","","","","","","","","lib::runtime::runtime_bindings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["module documents","module documents","this builder must have a path to a complied Halide folder …","This represents halide generator it is built using …","","","","","","","","","","","","","","","","","","","","","","","","","","Need doc","","","","","","","","","","","","","","","","An opaque struct containing per-GPU API implementations of …","The number of bits of precision of a single scalar value …","","","","","","","","","","","","","","","","","","","","","","","","","","","A device-handle for e.g. GPU memory used to back this …","","","","","The interface used to interpret the above handle.","","","","","","The shape of the buffer. Halide does not own this array - …","The dimensionality of the buffer.","","","flags with various meanings.","","","","","","","","","","","","Copy image data from device memory to host memory. This …","","","","","If halide_memoization_cache_lookup succeeds, …","Set the soft maximum amount of memory, in bytes, that the …","Print out timing statistics for everything run since the …","Reset profiler state cheaply. May leave threads running or …","Set the number of threads used by Halide’s thread pool. …","Set the file descriptor that Halide should write binary …","Define halide_do_par_for to replace the default thread pool","If tracing is writing to a file. This call closes that file","Types in the halide type system. They can be ints, …","&lt; IEEE floating point numbers","&lt; signed integers","&lt; unsigned integers","A runtime tag for a type in the halide type system. Can be …","A pointer to the start of the data in main memory. In …","","","","","","","How many elements in a vector. This is 1 for scalar types.","","Pads the buffer up to a multiple of 8 bytes","","","","","","","","","","","","","","","","","The type of each buffer element.","","","","","",""],"i":[0,0,0,0,1,2,1,2,1,1,2,2,1,2,1,2,1,2,2,2,2,1,1,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,4,5,6,4,7,8,5,6,4,7,8,7,5,6,4,7,8,5,6,4,7,8,4,7,7,7,7,8,7,7,7,7,8,7,7,7,7,7,8,8,6,6,8,5,6,4,7,8,5,6,4,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,5,6,4,7,8,4,6,8,6,5,6,4,7,8,5,6,4,7,8,5,6,4,7,8,8,5,6,4,7,8,7],"f":[null,null,null,null,[[],["result",6]],[[]],[[]],[[]],[[]],[[],["output",3]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["into",8,[["pathbuf",3]]],["into",8,[["pathbuf",3]]]],["genbuilder",3]],[[["string",3]],["generator",3]],[[["into",8,[["pathbuf",3]]]]],[[["generator",3]]],[[],["result",6]],[[],["output",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,[[],["halide_buffer_t",3]],null,null,[[]],null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["halidedeviceinterfaceimplt",3]],[[],["halide_dimension_t",3]],[[],["halide_type_t",3]],[[],["halide_device_interface_t",3]],[[],["halide_buffer_t",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"Generator"],[3,"GenBuilder"],[3,"HalideBuffer"],[3,"halide_type_t"],[3,"HalideDeviceInterfaceImplT"],[3,"halide_dimension_t"],[3,"halide_device_interface_t"],[3,"halide_buffer_t"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};