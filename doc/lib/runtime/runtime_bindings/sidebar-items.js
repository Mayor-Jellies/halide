initSidebarItems({"constant":[["halide_type_code_t_halide_type_float","< IEEE floating point numbers"],["halide_type_code_t_halide_type_int","< signed integers"],["halide_type_code_t_halide_type_uint","< unsigned integers"]],"fn":[["halide_copy_to_host","Copy image data from device memory to host memory. This must be called explicitly to copy back the results of a GPU-based filter."],["halide_free",""],["halide_malloc",""],["halide_memoization_cache_release","If halide_memoization_cache_lookup succeeds, halide_memoization_cache_release must be called to signal the storage is no longer being used by the caller. "],["halide_memoization_cache_set_size","Set the soft maximum amount of memory, in bytes, that the LRU cache will use to memoize Func results."],["halide_profiler_report","Print out timing statistics for everything run since the last reset. Also happens at process exit."],["halide_profiler_reset","Reset profiler state cheaply. May leave threads running or some memory allocated but all accumulated statistics are reset."],["halide_set_num_threads","Set the number of threads used by Halide’s thread pool. Returns the old number."],["halide_set_trace_file","Set the file descriptor that Halide should write binary trace events to. If called with 0 as the argument, Halide outputs trace information to stdout in a human-readable format. If never called, Halide checks the for existence of an environment variable called HL_TRACE_FILE and opens that file. If HL_TRACE_FILE is not defined, it outputs trace information to stdout in a human-readable format."],["halide_shutdown_thread_pool","Define halide_do_par_for to replace the default thread pool implementation. halide_shutdown_thread_pool can also be called to release resources used by the default thread pool on platforms where it makes sense. See Func::set_custom_do_task and Func::set_custom_do_par_for. Should return zero if all the jobs return zero, or an arbitrarily chosen return value from one of the jobs otherwise."],["halide_shutdown_trace","If tracing is writing to a file. This call closes that file (flushing the trace). Returns zero on success."]],"struct":[["HalideDeviceInterfaceImplT","An opaque struct containing per-GPU API implementations of the device functions."],["halide_buffer_t",""],["halide_device_interface_t",""],["halide_dimension_t",""],["halide_type_t","A runtime tag for a type in the halide type system. Can be ints, unsigned ints, or floats of various bit-widths the ‘bits’ field). (Can also be vectors of the same (by setting the ‘lanes’ field to something larger than one). This struct should be exactly 32-bits in size."]],"type":[["halide_type_code_t","Types in the halide type system. They can be ints, unsigned ints, or floats (of various bit-widths), or a handle (which is always 64-bits). Note that the int/uint/float values do not imply a specific bit width (the bit width is expected to be encoded in a separate value)."]]});